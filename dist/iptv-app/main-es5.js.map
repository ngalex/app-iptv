{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/channels/channel-create/channel-create.component.ts","webpack:///src/app/channels/channel-create/channel-create.component.html","webpack:///src/app/channels/channel-editor/channel-editor.component.ts","webpack:///src/app/channels/channel-editor/channel-editor.component.html","webpack:///src/app/lists/list-create/list-create.component.ts","webpack:///src/app/lists/list-create/list-create.component.html","webpack:///src/app/lists/list-editor/list-editor.component.ts","webpack:///src/app/lists/list-editor/list-editor.component.html","webpack:///src/app/lists/mod-iptv-list/mod-iptv-list.component.ts","webpack:///src/app/lists/mod-iptv-list/mod-iptv-list.component.html","webpack:///src/app/lists/navigator-bar/navigator-bar.component.ts","webpack:///src/app/lists/navigator-bar/navigator-bar.component.html","webpack:///src/app/mod-footer/mod-footer.component.ts","webpack:///src/app/mod-footer/mod-footer.component.html","webpack:///src/app/mod-header/mod-header.component.ts","webpack:///src/app/mod-header/mod-header.component.html","webpack:///src/app/models/Channel.ts","webpack:///src/app/models/Playlist.ts","webpack:///src/app/pages/not-found/not-found.component.ts","webpack:///src/app/pages/not-found/not-found.component.html","webpack:///src/app/services/channel/channel.service.ts","webpack:///src/app/services/navigator-service.service.ts","webpack:///src/app/services/playlist/playlist.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","redirectTo","pathMatch","AppRoutingModule","forRoot","enableTracing","paramsInheritanceStrategy","useHash","imports","AppComponent","title","console","log","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ChannelCreateComponent","_location","navbarService","plService","chnService","_snackBar","newChannel","addRoute","IdPlaylist","selectedPlaylist","Url","urlInput","addChannel","openSnackBar","Id","removeRoute","message","action","open","duration","onCreate","onCancel","ChannelEditorComponent","route","selectedChannel","enableEdit","isActiveChannelEditor","paramMap","subscribe","params","index","get","channels","getChannels","chn$","getChannels$","channel","i","chn","value","changeChannel","removeChannel","window","location","href","ListCreateComponent","newPlaylist","Name","nameInput","addPlaylist","ListEditorComponent","disablePlaylistEditor","changedPlaylist","emit","setPlaylist","ModIptvListComponent","router","isActivePlaylistsEditor","clearRoutes","playlists","playlistSource","pl","onSelectPlaylist","navigate","changePlaylist","removePlaylist","NavigatorBarComponent","routesTop","param","routesStack","length","isEnabledArrowBack","isEnabledAddChannel","isEnabledAddPlaylist","isEnabledChannelList","topRoute","url","back","ModFooterComponent","ModHeaderComponent","Channel","idPlaylist","_idPlaylist","_id","_url","Playlist","name","items","_name","_items","NotFoundComponent","ChannelService","channelsSource","channels$","idPl","n","forEach","chns","push","asObservable","maxId","next","findById","splice","providedIn","NavigatorBarService","pop","toString","section","PlaylistService","loadPlaylists","playlist","environment","production","bootstrapModule","catch","err","error"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAMC,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,WADR;AACqBC,eAAS,EAAE,iGADhC;AACsDC,cAAQ,EAAE,CAC5D;AAAEF,YAAI,EAAE,aAAR;AAAuBC,iBAAS,EAAE;AAAlC,OAD4D;AADhE,KADqB,EAMrB;AACED,UAAI,EAAE,eADR;AACyBC,eAAS,EAAE,wGADpC;AAC4DC,cAAQ,EAAE,CAClE;AAAEF,YAAI,EAAE,YAAR;AAAsBC,iBAAS,EAAE;AAAjC,OADkE;AADtE,KANqB,EAWrB;AAAED,UAAI,EAAE,EAAR;AAAYG,gBAAU,EAAE,YAAxB;AAAsCC,eAAS,EAAE;AAAjD,KAXqB,EAYrB;AAAEJ,UAAI,EAAE,IAAR;AAAcG,gBAAU,EAAE,YAA1B;AAAwCC,eAAS,EAAE;AAAnD,KAZqB,CAAvB;;QAwBaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBARlB,CAAC,6DAAaC,OAAb,CAAqBP,MAArB,EAA6B;AACrCQ,qBAAa,EAAE,KADsB;AAErCC,iCAAyB,EAAE,QAFU;AAGrCC,eAAO,EAAE;AAH4B,OAA7B,CAAD,CAQkB,EAFjB,4DAEiB;;;;0HAAhBJ,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAT5B,sDAS4B;eATnB;AACRK,iBAAO,EAAE,CAAC,6DAAaJ,OAAb,CAAqBP,MAArB,EAA6B;AACrCQ,yBAAa,EAAE,KADsB;AAErCC,qCAAyB,EAAE,QAFU;AAGrCC,mBAAO,EAAE;AAH4B,WAA7B,CAAD,CADD;AAORZ,iBAAO,EAAE,CAAC,4DAAD;AAPD,S;AASmB,Q;;;;;;;;;;;;;;;;;;AChC7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQac,Y;;;AAGX,8BAAc;AAAA;;AAFd,aAAAC,KAAA,GAAQ,MAAR;AAGEC,eAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;;;;mCAEO;AACND,iBAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;;;;;;;uBATUH,Y;AAAY,K;;;YAAZA,Y;AAAY,2B;AAAA,e;AAAA,a;AAAA,4L;AAAA;AAAA;ACRzB;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAcA;;AAOJ;;AACA;;AACI;;AAEA;;AACI;;AAAG;;AAAqB;;AACxB;;AAAG;;AAAuC;;AAC1C;;AAAG;;AAA6D;;AAChE;;AAAG;;AAAsC;;AACzC;;AAAG;;AAAU;;AAAc;;AAAW;;AAA4B;;AACtE;;AACJ;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;;;;;;;;sEDnCaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTI,kBAAQ,EAAE,MADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;AERzwD,CAqBA;;;QAkGaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,CAAE,oFAAF,EAAmB,iFAAnB,EAAmC,wFAAnC,C;AAAwD,gBA1C1D,CACP,uEADO,EAEP,oEAFO,EAGP,4FAHO,EAIP,2DAJO,EAKP;AACA,2FANO,EAOP,uEAPO,EAQP,oFARO,EASP,yEATO,EAUP,sFAVO,EAWP,qEAXO,EAYP,6EAZO,EAaP,uEAbO,EAcP,2EAdO,EAeP,iFAfO,EAgBP,yEAhBO,EAiBP,2EAjBO,EAkBP,+EAlBO,EAmBP,8EAnBO,EAoBP,qEApBO,EAqBP,uEArBO,EAsBP,qEAtBO,EAuBP,qEAvBO,EAwBP,2EAxBO,EAyBP,+EAzBO,EA0BP,oFA1BO,EA2BP,4FA3BO,EA4BP,uEA5BO,EA6BP,uEA7BO,EA8BP,yEA9BO,EA+BP,2EA/BO,EAgCP,yEAhCO,EAiCP,oFAjCO,EAkCP,8EAlCO,EAmCP,qEAnCO,EAoCP,uEApCO,EAqCP,qEArCO,EAsCP,2EAtCO,EAuCP,2EAvCO,EAwCP,qEAxCO,CA0C0D;;;;0HAGxDA,S,EAAS;AAAA,uBAxDlB,2DAwDkB,EAvDlB,mFAuDkB,EAtDlB,mFAsDkB,EArDlB,iGAqDkB,EApDlB,4FAoDkB,EAnDlB,wGAmDkB,EAlDlB,6FAkDkB,EAjDlB,yGAiDkB,EAhDlB,mGAgDkB,EA/ClB,uFA+CkB;AA/CD,kBAGjB,uEAHiB,EAIjB,oEAJiB,EAKjB,4FALiB,EAMjB,2DANiB,EAOjB;AACA,6FARiB,EASjB,uEATiB,EAUjB,oFAViB,EAWjB,yEAXiB,EAYjB,sFAZiB,EAajB,qEAbiB,EAcjB,6EAdiB,EAejB,uEAfiB,EAgBjB,2EAhBiB,EAiBjB,iFAjBiB,EAkBjB,yEAlBiB,EAmBjB,2EAnBiB,EAoBjB,+EApBiB,EAqBjB,8EArBiB,EAsBjB,qEAtBiB,EAuBjB,uEAvBiB,EAwBjB,qEAxBiB,EAyBjB,qEAzBiB,EA0BjB,2EA1BiB,EA2BjB,+EA3BiB,EA4BjB,oFA5BiB,EA6BjB,4FA7BiB,EA8BjB,uEA9BiB,EA+BjB,uEA/BiB,EAgCjB,yEAhCiB,EAiCjB,2EAjCiB,EAkCjB,yEAlCiB,EAmCjB,oFAnCiB,EAoCjB,8EApCiB,EAqCjB,qEArCiB,EAsCjB,uEAtCiB,EAuCjB,qEAvCiB,EAwCjB,2EAxCiB,EAyCjB,2EAzCiB,EA0CjB,qEA1CiB;AA+CC,O;AALL,K;;;;;sEAKJA,S,EAAS;cA1DrB,sDA0DqB;eA1DZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,mFAFY,EAGZ,mFAHY,EAIZ,iGAJY,EAKZ,4FALY,EAMZ,wGANY,EAOZ,6FAPY,EAQZ,yGARY,EASZ,mGATY,EAUZ,uFAVY,CADN;AAaRT,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,4FAHO,EAIP,2DAJO,EAKP;AACA,+FANO,EAOP,uEAPO,EAQP,oFARO,EASP,yEATO,EAUP,sFAVO,EAWP,qEAXO,EAYP,6EAZO,EAaP,uEAbO,EAcP,2EAdO,EAeP,iFAfO,EAgBP,yEAhBO,EAiBP,2EAjBO,EAkBP,+EAlBO,EAmBP,8EAnBO,EAoBP,qEApBO,EAqBP,uEArBO,EAsBP,qEAtBO,EAuBP,qEAvBO,EAwBP,2EAxBO,EAyBP,+EAzBO,EA0BP,oFA1BO,EA2BP,4FA3BO,EA4BP,uEA5BO,EA6BP,uEA7BO,EA8BP,yEA9BO,EA+BP,2EA/BO,EAgCP,yEAhCO,EAiCP,oFAjCO,EAkCP,8EAlCO,EAmCP,qEAnCO,EAoCP,uEApCO,EAqCP,qEArCO,EAsCP,2EAtCO,EAuCP,2EAvCO,EAwCP,qEAxCO,CAbD;AAuDRU,mBAAS,EAAE,CAAE,oFAAF,EAAmB,iFAAnB,EAAmC,wFAAnC,CAvDH;AAwDRC,mBAAS,EAAE,CAAC,2DAAD;AAxDH,S;AA0DY,Q;;;;;;;;;;;;;;;;;;ACvHtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAeaC,sB;;;AAGX,sCAAoBC,SAApB,EACoBC,aADpB,EAEoBC,SAFpB,EAGoBC,UAHpB,EAIoBC,SAJpB,EAI4C;AAAA;;AAJxB,aAAAJ,SAAA,GAAAA,SAAA;AACA,aAAAC,aAAA,GAAAA,aAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAC,UAAA,GAAAA,UAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AANf,aAAAC,UAAA,GAAsB,IAAI,8DAAJ,CAAY,CAAC,CAAb,EAAe,CAAC,CAAhB,EAAkB,EAAlB,CAAtB;AAOO,aAAKJ,aAAL,CAAmBK,QAAnB,CAA4B,aAA5B;AACAhB,eAAO,CAACC,GAAR,CAAY,mBAAZ;AACX;;;;mCAEO,CACP;;;mCAEO;AACN,eAAKc,UAAL,CAAgBE,UAAhB,GAA6B,KAAKL,SAAL,CAAeM,gBAA5C;AACA,eAAKH,UAAL,CAAgBI,GAAhB,GAAsB,KAAKC,QAA3B;AACA,eAAKP,UAAL,CAAgBQ,UAAhB,CAA2B,KAAKN,UAAhC;AACA,eAAKO,YAAL,CAAkB,mBAAmB,KAAKP,UAAL,CAAgBQ,EAAnC,GAAwC,GAA1D,EAA+D,QAA/D;AACA,eAAKZ,aAAL,CAAmBa,WAAnB;AACD;;;qCAEYC,O,EAAiBC,M,EAAgB;AAC5C,eAAKZ,SAAL,CAAea,IAAf,CAAoBF,OAApB,EAA6BC,MAA7B,EAAqC;AACnCE,oBAAQ,EAAE;AADyB,WAArC;AAGD;;;mCAEO;AACN,eAAKjB,aAAL,CAAmBa,WAAnB;AACD;;;;;;;uBA/BUf,sB,EAAsB,yH,EAAA,+J,EAAA,2J,EAAA,wJ,EAAA,wI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA,6N;AAAA;AAAA;ACfnC;;AACI;;AACI;;AAA6B;;AAAc;;AAC3C;;AAAsC;AAAA;AAAA;;AAAtC;;AACJ;;AACA;;AAAmB;AAAA,mBAAS,IAAAoB,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAK;;AAC7C;;AAAgC;AAAA,mBAAS,IAAAC,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAQ;;AACjE;;;;AAJ8C;;AAAA;;;;;;;;;sEDYjCrB,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTP,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEfnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMQ;;AAA+D;;AAAuB;;;;;;AAAvB;;AAAA;;;;;;;;AAE3D;;AACI;;AACI;;AAAW;;AAAoB;;AAC/B;;AAAuD;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAvD;;AAEJ;;AACA;;AAA2C;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAuC;;AAAO;;AACzF;;AAAwC;AAAA;;AAAA;;AAAA,2CAA2B,IAA3B;AAA+B,SAA/B;;AAAiC;;AAAQ;;AACrF;;;;;;AALyC;;AAAA;;;;;;;;AAO7C;;AAAmC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACO;;AAAW;;;;;;;;AAfzD;;AACI;;AAAqC;;AAAyB;;AAC9D;;AACA;;AAWA;;AAEA;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAuD;;AAAQ;;AACvE;;AAAmB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AAAK;;AAC/C;;AACA;;AACJ;;;;;;;;;;AAnByC;;AAAA;;AAC/B;;AAAA,oHAAgD,UAAhD,EAAgD,IAAhD;;AAaF;;AAAA;;;;QDJC2B,sB;;;AAQX,sCAAoBnB,SAApB,EACUC,UADV,EAEUmB,KAFV,EAGUrB,aAHV,EAIUG,SAJV,EAIkC;AAAA;;AAAA;;AAJd,aAAAF,SAAA,GAAAA,SAAA;AACV,aAAAC,UAAA,GAAAA,UAAA;AACA,aAAAmB,KAAA,GAAAA,KAAA;AACA,aAAArB,aAAA,GAAAA,aAAA;AACA,aAAAG,SAAA,GAAAA,SAAA;AATH,aAAAmB,eAAA,GAA0B,IAA1B;AACA,aAAAC,UAAA,GAAsB,KAAtB;AASHlC,eAAO,CAACC,GAAR,CAAY,+BAAZ;AACF,aAAKU,aAAL,CAAmBwB,qBAAnB,GAA2C,IAA3C;AACA,aAAKH,KAAL,CAAWI,QAAX,CAAoBC,SAApB,CACE,UAACC,MAAD,EAAY;AACV,eAAI,CAACC,KAAL,GAAa,CAACD,MAAM,CAACE,GAAP,CAAW,IAAX,CAAd;AACA,eAAI,CAAC5B,SAAL,CAAeM,gBAAf,GAAkC,KAAI,CAACqB,KAAvC;AACA,eAAI,CAACE,QAAL,GAAgB,KAAI,CAAC5B,UAAL,CAAgB6B,WAAhB,CAA4B,KAAI,CAACH,KAAjC,CAAhB;;AACA,eAAI,CAAC5B,aAAL,CAAmBK,QAAnB,CAA4B,MAAM,KAAI,CAACuB,KAAvC;;AACAvC,iBAAO,CAACC,GAAR,CAAY,WAAZ,EALU,CAMV;AACD,SARH;AAUD;;;;mCAEO;AAAA;;AAAWD,iBAAO,CAACC,GAAR,CAAY,0BAAZ;AACjB,eAAK0C,IAAL,GAAY,KAAK9B,UAAL,CAAgB+B,YAAhB,EAAZ;AACA,eAAKD,IAAL,CAAUN,SAAV,CAAqB;AAAA,mBAAM,MAAI,CAACI,QAAL,GAAgB,MAAI,CAAC5B,UAAL,CAAgB6B,WAAhB,CAA4B,MAAI,CAACH,KAAjC,CAAtB;AAAA,WAArB;AACD;;;sCAEU;AACT,eAAK5B,aAAL,CAAmBwB,qBAAnB,GAA2C,KAA3C;AACD;;;8BAEKU,O,EAAgB;AACpB,eAAKhC,UAAL,CAAgBQ,UAAhB,CAA2BwB,OAA3B;AACD;;;wCAEeC,C,EAAS;AACvB,eAAKb,eAAL,GAAuBa,CAAvB;AACA,eAAKZ,UAAL,GAAkB,IAAlB;AACD;;;oCAEWa,G,EAAc3B,Q,EAA0B;AAClD2B,aAAG,CAAC5B,GAAJ,GAAUC,QAAQ,CAAC4B,KAAnB;AACA,eAAKnC,UAAL,CAAgBoC,aAAhB,CAA8BF,GAA9B;AACA,eAAKd,eAAL,GAAuB,IAAvB;AACA,eAAKC,UAAL,GAAkB,KAAlB;AACA,eAAKZ,YAAL,CAAkB,4BAAlB,EAAgD,QAAhD;AACD;;;iCAEQrC,E,EAAY;AACnB,eAAK4B,UAAL,CAAgBqC,aAAhB,CAA8BjE,EAA9B;AACA,eAAKqC,YAAL,CAAkB,WAAlB,EAA+B,QAA/B;AACD;;;qCAEYG,O,EAAiBC,M,EAAgB;AAC5C,eAAKZ,SAAL,CAAea,IAAf,CAAoBF,OAApB,EAA6BC,MAA7B,EAAqC;AACnCE,oBAAQ,EAAE;AADyB,WAArC;AAGD;;;kCAESkB,C,EAAW;AACnBK,gBAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,KAAKZ,QAAL,CAAcK,CAAd,EAAiB3B,GAAxC;AACD;;;;;;;uBAlEUY,sB,EAAsB,2J,EAAA,wJ,EAAA,+H,EAAA,+J,EAAA,wI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,c;AAAA,a;AAAA,opB;AAAA;AAAA;ACfnC;;AACI;;AACI;;AACJ;;AACA;;AAqBJ;;;;AArBmB;;AAAA;;;;;;;;;sEDWNA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACT7B,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEfnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWakD,mB;;;AAGX,mCAAoB5C,SAApB,EACUC,aADV,EAEUC,SAFV,EAGUE,SAHV,EAGkC;AAAA;;AAHd,aAAAJ,SAAA,GAAAA,SAAA;AACV,aAAAC,aAAA,GAAAA,aAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAE,SAAA,GAAAA,SAAA;AACR,aAAKH,aAAL,CAAmBK,QAAnB,CAA4B,cAA5B;AACAhB,eAAO,CAACC,GAAR,CAAY,oBAAZ;AACD;;;;mCAEO;AACN,eAAKsD,WAAL,GAAmB,IAAI,gEAAJ,CAAa,CAAC,CAAd,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,CAAzB,CAAnB;AACD;;;mCAEO;AACN,eAAKA,WAAL,CAAiBC,IAAjB,GAAwB,KAAKC,SAA7B;AACA,eAAK7C,SAAL,CAAe8C,WAAf,CAA2B,KAAKH,WAAhC;AACA,eAAKjC,YAAL,CAAkB,mBAAmB,KAAKiC,WAAL,CAAiBC,IAAtD,EAA4D,QAA5D;AACA,eAAK7C,aAAL,CAAmBa,WAAnB;AACD;;;mCAEO;AACN,eAAKb,aAAL,CAAmBa,WAAnB;AACD;;;qCAEYC,O,EAAiBC,M,EAAgB;AAC5C,eAAKZ,SAAL,CAAea,IAAf,CAAoBF,OAApB,EAA6BC,MAA7B,EAAqC;AACnCE,oBAAQ,EAAE;AADyB,WAArC;AAGD;;;;;;;uBA9BU0B,mB,EAAmB,yH,EAAA,+J,EAAA,2J,EAAA,wI;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,c;AAAA,a;AAAA,8X;AAAA;AAAA;ACXhC;;AACI;;AACI;;AAA6B;;AAA6B;;AAC1D;;AAA2D;AAAA;AAAA;;AAA3D;;AACJ;;AACA;;AAAiD;AAAA,mBAAS,IAAAzB,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAK;;AAC3E;;AACA;AAAA,mBAAS,IAAAC,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAQ;;AACjC;;;;AALmE;;AAAA;;;;;;;;;sEDQtDwB,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTpD,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEXhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASauD,mB;;;AAIX,qCAAc;AAAA;;AAHJ,aAAAC,qBAAA,GAAwB,IAAI,0DAAJ,EAAxB;AACH,aAAAC,eAAA,GAA4B,IAAI,yDAAJ,CAAa,CAAC,CAAd,EAAgB,MAAhB,EAAuB,MAAvB,EAA8B,CAA9B,CAA5B;AAES;;;;mCAER,CACP;;;sCAEU;AACT,eAAKD,qBAAL,CAA2BE,IAA3B,CAAgC,KAAhC;AACD;;;mCAEO;AACN,eAAKF,qBAAL,CAA2BE,IAA3B,CAAgC,KAAhC;AACD;;;;;;;uBAfUH,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,sC;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,kiB;AAAA;AAAA;ACThC;;AACE;;AAAyB;;AAA2B;;AACpD;;AAEE;;AACE;;AAAoB;;AAAE;;AACtB;;AAAuC;AAAA;AAAA;;AAAvC;;AACA;;AAAU;;AAAK;;AACjB;;AAEA;;AACE;;AAAsB;;AAAM;;AAC5B;;AACA;AAAA;AAAA;;AADA;;AAEF;;AAEA;;AACE;;AAAwC;AAAA,mBAAS,IAAAI,WAAA,EAAT;AAAsB,WAAtB;;AAAwB;;AAAO;;AACvE;;AAAuC;AAAA,mBAAS,IAAAjC,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAS;;AACvE;;AACF;;AACF;;;;AAf6C;;AAAA;;AAOvC;;AAAA;;;;;;;;;sEDJO6B,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTzD,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;gBAC7B;;;;;;;;;;;;;;;;;;;;AEVH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACOY;;AACI;;AAAoD;;AAAiB;;AACrE;;AAAsD;;AAA+C;;AACzG;;;;;;AAFwD;;AAAA;;AACE;;AAAA;;;;;;;;AAGtD;;AACI;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAEJ;;AACA;;AAAmD;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAC/C;;AAAU;;AAAI;;AAAY;;AAC9B;;AACJ;;;;;;AALY;;AAAA;;;;;;;;AAXxB;;AACI;;AACA;;AACI;;AAIA;;AAWJ;;AACA;;AACI;;AAAmE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAClB;;AAAM;;AACvD;;AAAiE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAkC;;AAAK;;AACxG;;AACI;;AAAU;;AAAc;;AAC5B;;AACA;;AAA6C;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACzC;;AAAuB;;AAAM;;AACjC;;AACJ;;AACJ;;AACA;;;;;;;;;;AA5Ba;;AAAA,oHAAkD,UAAlD,EAAkD,GAAlD;;AAkBD;;AAAA;;AAE8B;;AAAA;;;;QDfjC4D,oB;;;AAMX,oCAAoBrD,aAApB,EACoBC,SADpB,EAEoBqD,MAFpB,EAGoBnD,SAHpB,EAG4C;AAAA;;AAHxB,aAAAH,aAAA,GAAAA,aAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AACA,aAAAqD,MAAA,GAAAA,MAAA;AACA,aAAAnD,SAAA,GAAAA,SAAA;AACN,aAAKH,aAAL,CAAmBuD,uBAAnB,GAA6C,IAA7C;AACAlE,eAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,aAAKU,aAAL,CAAmBwD,WAAnB;AACA,aAAKxD,aAAL,CAAmBK,QAAnB,CAA4B,YAA5B;AACAhB,eAAO,CAACC,GAAR,CAAY,kBAAZ;AAEb;;;;mCAEO;AAAaD,iBAAO,CAACC,GAAR,CAAY,qBAAZ;AACnB,eAAKmE,SAAL,GAAiB,KAAKxD,SAAL,CAAeyD,cAAhC;AACD;;;sCAEU;AACT,eAAK1D,aAAL,CAAmBuD,uBAAnB,GAA6C,KAA7C;AACD;;;uCAEcI,E,EAAY;AACzB,eAAKC,gBAAL,CAAsBD,EAAE,CAAC/C,EAAzB;AACA,eAAKkC,SAAL,GAAiBa,EAAE,CAACd,IAApB;AACA,eAAKtB,UAAL,GAAkB,IAAlB;AACD;;;sCACaoC,E,EAAY;AACxB,eAAK1D,SAAL,CAAeM,gBAAf,GAAkC,KAAKA,gBAAvC;AACA,eAAK+C,MAAL,CAAYO,QAAZ,CAAqB,CAAC,eAAaF,EAAE,CAAC/C,EAAjB,CAArB;AACD;;;yCAEgBtC,E,EAAU;AACzB,eAAKiC,gBAAL,GAAwBjC,EAAxB;AACD;;;uCAEcqF,E,EAAY;AACzBA,YAAE,CAACd,IAAH,GAAU,KAAKC,SAAf;AACA,eAAK7C,SAAL,CAAe6D,cAAf,CAA8BH,EAA9B;AACA,eAAKpD,gBAAL,GAAwB,IAAxB;AACA,eAAKI,YAAL,CAAkB,UAAlB,EAA8B,QAA9B;AACD;;;iCAEQrC,E,EAAY;AACnB,eAAK2B,SAAL,CAAe8D,cAAf,CAA8BzF,EAA9B;AACA,eAAKqC,YAAL,CAAkB,WAAlB,EAA+B,QAA/B;AACD;;;qCAEYG,O,EAAiBC,M,EAAgB;AAC5C,eAAKZ,SAAL,CAAea,IAAf,CAAoBF,OAApB,EAA6BC,MAA7B,EAAqC;AACnCE,oBAAQ,EAAE;AADyB,WAArC;AAGD;;;;;;;uBAxDUoC,oB,EAAoB,+J,EAAA,2J,EAAA,uH,EAAA,wI;AAAA,K;;;YAApBA,oB;AAAoB,wC;AAAA,c;AAAA,a;AAAA,+3B;AAAA;AAAA;ACZjC;;AACI;;AACI;;AACJ;;AACA;;AAiCJ;;;;AAjCmB;;AAAA;;;;;;;;;sEDQNA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACT9D,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKsB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACMI;;AAAgD;AAAA;;AAAA;;AAAA;AAAA;;AAC5C;;AAAU;;AAAY;;AAAW;;AACrC;;;;;;;;AACA;;AAA+C;AAAA;;AAAA;;AAAA;AAAA;;AAC3C;;AAAU;;AAAG;;AAAW;;AAC5B;;;;QDDSuE,qB;;;AAMX,qCAAoBjE,SAApB,EACUuD,MADV,EAEUtD,aAFV,EAE8C;AAAA;;AAAA;;AAF1B,aAAAD,SAAA,GAAAA,SAAA;AACV,aAAAuD,MAAA,GAAAA,MAAA;AACA,aAAAtD,aAAA,GAAAA,aAAA;AACR,aAAKA,aAAL,CAAmBiE,SAAnB,CAA6BvC,SAA7B,CACE,UAACwC,KAAD,EAAmB;AAChB,gBAAI,CAAClE,aAAL,CAAmBmE,WAAnB,CAA+BC,MAA/B,GAAwC,CAAzC,GAA8C,MAAI,CAACC,kBAAL,GAA0B,KAAxE,GAAgF,MAAI,CAACA,kBAAL,GAA0B,IAA1G;;AACA,cAAI,MAAI,CAACrE,aAAL,CAAmBuD,uBAAnB,IAA8C,CAAC,MAAI,CAACvD,aAAL,CAAmBwB,qBAAtE,EAA6F;AAC3F,kBAAI,CAAC8C,mBAAL,GAA2B,KAA3B;AACA,kBAAI,CAACC,oBAAL,GAA4B,IAA5B;AACA,kBAAI,CAACC,oBAAL,GAA4B,KAA5B;AACD,WAJD,CAKA;AALA,eAMK;AACH,oBAAI,CAACF,mBAAL,GAA2B,IAA3B;AACA,oBAAI,CAACC,oBAAL,GAA4B,KAA5B;AACA,oBAAI,CAACC,oBAAL,GAA4B,IAA5B;AACD;AACF,SAdH;AAeGnF,eAAO,CAACC,GAAR,CAAY,wBAAZ;AACJ;;;;mCAEO;AACND,iBAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;;;uCAEW;AACV,cAAI,KAAKU,aAAL,CAAmByE,QAAnB,MAAiC,aAArC,EAAoD;AAClD,iBAAKnB,MAAL,CAAYO,QAAZ,CAAqB,CAAC,KAAKP,MAAL,CAAYoB,GAAZ,GAAkB,aAAnB,CAArB;AACD;AACF;;;wCAEY;AACX,cAAI,KAAK1E,aAAL,CAAmByE,QAAnB,MAAiC,cAArC,EAAqD;AACnD,iBAAKnB,MAAL,CAAYO,QAAZ,CAAqB,CAAC,wBAAD,CAArB;AACD;AACF;;;+BAEG;AACF,eAAK7D,aAAL,CAAmBa,WAAnB;AACD;;;;;;;uBA7CUmD,qB,EAAqB,yH,EAAA,uH,EAAA,+J;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,c;AAAA,a;AAAA,0K;AAAA;AAAA;ACVlC;;AACI;;AAAyD;AAAA,mBAAS,IAAAW,IAAA,EAAT;AAAe,WAAf;;AACrD;;AAAU;;AAAU;;AACxB;;AAEA;;AACA;;AAGA;;AAGJ;;;;AAX4B;;AAAA;;AAKL;;AAAA;;AAGA;;AAAA;;;;;;;;;sEDCVX,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTzE,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEVlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOamF,kB;;;AAEX,oCAAc;AAAA;;AAACvF,eAAO,CAACC,GAAR,CAAY,wBAAZ;AAAwC;;;;mCAE/C;AAAUD,iBAAO,CAACC,GAAR,CAAY,mBAAZ;AACjB;;;;;;;uBALUsF,kB;AAAkB,K;;;YAAlBA,kB;AAAkB,qC;AAAA,c;AAAA,a;AAAA,+C;AAAA;AAAA;ACP/B;;AACI;;AAAM;;AAAM;;AAChB;;;;;;;;sEDKaA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTrF,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;AEP/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;QAOaoF,kB;;;AAEX,oCAAc;AAAA;;AACZxF,eAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;;;;mCAEO;AAAUD,iBAAO,CAACC,GAAR,CAAY,mBAAZ;AACjB;;;;;;;uBAPUuF,kB;AAAkB,K;;;YAAlBA,kB;AAAkB,qC;AAAA,c;AAAA,a;AAAA,mF;AAAA;AAAA;ACP/B;;AACA;;AACI;;AAAmC;;AAAU;;AAAM;;AAAO;;AAE9D;;AACA;;;;AAHO;;AAAA;;;;;;;;;sEDKMA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTtF,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;AEP/B;AAAA;;;AAAA;AAAA;AAAA;;QAAaqF,O;;;AAmBT,uBAAYC,UAAZ,EAAgCzG,EAAhC,EAA4CoG,GAA5C,EAAuD;AAAA;;AACnD,aAAKM,WAAL,GAAkBD,UAAlB;AACA,aAAKE,GAAL,GAAW3G,EAAX;AACA,aAAK4G,IAAL,GAAYR,GAAZ;AACH;;;;4BAnBa;AAAY,iBAAO,KAAKM,WAAZ;AAA0B,S;0BACrCD,U,EAAkB;AAAG,eAAKC,WAAL,GAAmBD,UAAnB;AAAgC;;;4BAC9D;AACF,iBAAO,KAAKE,GAAZ;AACH,S;0BACM3G,E,EAAU;AACb,eAAK2G,GAAL,GAAW3G,EAAX;AACH;;;4BACM;AACH,iBAAO,KAAK4G,IAAZ;AACH,S;0BACOR,G,EAAW;AACf,eAAKQ,IAAL,GAAYR,GAAZ;AACH;;;;;;;;;;;;;;;;;;;;;ACjBL;AAAA;;;AAAA;AAAA;AAAA;;QAAaS,Q;;;AAcT,wBAAa7G,EAAb,EAAyB8G,IAAzB,EAAsCV,GAAtC,EAAkDW,KAAlD,EAA+D;AAAA;;AAC3D,aAAKJ,GAAL,GAAW3G,EAAX;AACA,aAAKgH,KAAL,GAAaF,IAAb;AACA,aAAKF,IAAL,GAAYR,GAAZ;AACA,aAAKa,MAAL,GAAcF,KAAd;AACH;;;;4BAdK;AAAI,iBAAO,KAAKJ,GAAZ;AAAkB,S;0BACrB3G,E,EAAU;AAAG,eAAK2G,GAAL,GAAW3G,EAAX;AAAgB;;;4BAC5B;AAAI,iBAAO,KAAKgH,KAAZ;AAAoB,S;0BACvBF,I,EAAY;AAAG,eAAKE,KAAL,GAAaF,IAAb;AAAoB;;;4BACrC;AAAI,iBAAO,KAAKF,IAAZ;AAAmB,S;0BACtBR,G,EAAW;AAAG,eAAKQ,IAAL,GAAYR,GAAZ;AAAkB;;;4BAC/B;AAAI,iBAAO,KAAKa,MAAZ;AAAqB,S;0BACxBF,K,EAAa;AAAG,eAAKE,MAAL,GAAcF,KAAd;AAAsB;;;;;;;;;;;;;;;;;;;;;ACZpD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaG,iB;;;AAEX,mCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,oC;AAAA,c;AAAA,a;AAAA;AAAA;ACP9B;;AAAG;;AAAgB;;;;;;;;sEDONA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTjG,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;AEP9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOagG,c;;;AAyBX,gCAAc;AAAA;;AAxBd,aAAAC,cAAA,GAA4B,CAC1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAD0B,EAE1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAF0B,EAG1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAH0B,EAI1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAJ0B,EAK1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAL0B,EAM1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAN0B,EAO1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAP0B,EAQ1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAR0B,EAS1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAT0B,EAU1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,SAAlB,CAV0B,EAW1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAX0B,EAY1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAZ0B,EAa1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAb0B,EAc1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAd0B,EAe1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAf0B,EAgB1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAhB0B,EAiB1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAjB0B,EAkB1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAlB0B,EAmB1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CAnB0B,EAoB1B,IAAI,8DAAJ,CAAY,CAAZ,EAAe,EAAf,EAAmB,SAAnB,CApB0B,CAA5B;AAsBA,aAAAC,SAAA,GAAY,IAAI,4CAAJ,EAAZ;AAEgB;;;;wCAEAC,I,EAAY;AAC1B,cAAIC,CAAC,GAAG,CAAR;AACA,eAAKH,cAAL,CAAoBI,OAApB,CAA4B,UAAA1D,GAAG,EAAI;AACjC,gBAAIA,GAAG,CAAC9B,UAAJ,IAAkBsF,IAAtB,EAA4BC,CAAC;AAC9B,WAFD;AAGA,iBAAOA,CAAP;AACD;;;oCAEWD,I,EAAY;AACtB,cAAIG,IAAI,GAAc,EAAtB;;AACA,cAAIH,IAAI,IAAI,IAAZ,EAAkB;AAChB,iBAAKF,cAAL,CAAoBI,OAApB,CAA4B,UAAA5D,OAAO,EAAI;AACrC,kBAAIA,OAAO,CAAC5B,UAAR,IAAsBsF,IAA1B,EAAgCG,IAAI,CAACC,IAAL,CAAU9D,OAAV;AACjC,aAFD;AAGD;;AACD,iBAAO6D,IAAP;AACD;;;uCAEW;AACV,iBAAO,KAAKJ,SAAL,CAAeM,YAAf,EAAP;AACD;;;mCAEU7D,G,EAAY;AACrB,cAAI8D,KAAK,GAAG,CAAC,CAAb;AACA,eAAKR,cAAL,CAAoBI,OAApB,CAA4B,UAAA5D,OAAO,EAAI;AACrC,gBAAIA,OAAO,CAACtB,EAAR,GAAasF,KAAjB,EAAwBA,KAAK,GAAGhE,OAAO,CAACtB,EAAhB;AACzB,WAFD;AAGAwB,aAAG,CAACxB,EAAJ,GAAS,EAAEsF,KAAX;AACA,cAAI9D,GAAG,CAACxB,EAAJ,IAAU,CAAC,CAAf,EAAkB,KAAK8E,cAAL,CAAoBM,IAApB,CAAyB5D,GAAzB;AAClB,eAAKuD,SAAL,CAAeQ,IAAf,CAAoB,KAAKT,cAAzB;AACD;;;sCAEapH,E,EAAU;AACtB,cAAIsD,KAAK,GAAG,KAAKwE,QAAL,CAAc9H,EAAd,CAAZ;AACA,cAAIsD,KAAK,GAAG,CAAC,CAAb,EAAgB,KAAK8D,cAAL,CAAoBW,MAApB,CAA2BzE,KAA3B,EAAkC,CAAlC;AAChB,eAAK+D,SAAL,CAAeQ,IAAf,CAAoB,KAAKT,cAAzB;AACD;;;iCAEQpH,E,EAAU;AACjB,eAAK,IAAI6D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKuD,cAAL,CAAoBtB,MAAxC,EAAgDjC,CAAC,EAAjD,EAAqD;AACnD,gBAAI,KAAKuD,cAAL,CAAoBvD,CAApB,EAAuBvB,EAAvB,IAA6BtC,EAAjC,EAAqC,OAAO6D,CAAP;AACtC;;AACD,iBAAO,CAAC,CAAR;AACD;;;sCAEaC,G,EAAc;AAC1B,cAAIR,KAAK,GAAG,KAAKwE,QAAL,CAAchE,GAAG,CAACxB,EAAlB,CAAZ;AACA,cAAIgB,KAAK,GAAG,CAAC,CAAb,EAAgB,KAAK8D,cAAL,CAAoB9D,KAApB,IAA6BQ,GAA7B;AAChB,eAAKuD,SAAL,CAAeQ,IAAf,CAAoB,KAAKT,cAAzB;AACD;;;;;;;uBA5EUD,c;AAAc,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVa,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;ACP3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaC,mB;;;AAMX,mCAAoBjD,MAApB,EAAoC;AAAA;;AAAhB,aAAAA,MAAA,GAAAA,MAAA;AAHpB,aAAAa,WAAA,GAAuB,EAAvB;AACA,aAAAF,SAAA,GAAkC,IAAI,0DAAJ,EAAlC;AAEqC5E,eAAO,CAACC,GAAR,CAAY,+BAAZ;AACpC;;;;iCAEQ+B,K,EAAa;AACpB,eAAK8C,WAAL,CAAiB6B,IAAjB,CAAsB3E,KAAtB;AACA,eAAK4C,SAAL,CAAed,IAAf,CAAoB,KAAKsB,QAAL,EAApB;AACD;;;sCAEU;AACT;AACA,cAAI,KAAKN,WAAL,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,iBAAKD,WAAL,CAAiBqC,GAAjB,GAD+B,CAE/B;;AACA,iBAAKvC,SAAL,CAAed,IAAf,CAAoB,KAAKsB,QAAL,EAApB;AACA,iBAAKnB,MAAL,CAAYO,QAAZ,CAAqB,CAAC,KAAK4C,QAAL,EAAD,CAArB;AACD;AACD;;;;;;AAKD;;;mCAEO;AACN,cAAG,KAAKtC,WAAL,CAAiBC,MAAjB,GAA0B,CAA7B,EAAgC,OAAO,KAAKD,WAAL,CAAiB,KAAKA,WAAL,CAAiBC,MAAjB,GAAwB,CAAzC,CAAP,CAAhC,KACK,OAAO,EAAP;AACN;;;sCAEa;AACZ,eAAKD,WAAL,GAAmB,EAAnB;AACD;;;mCAEU;AACT,cAAI9C,KAAK,GAAW,EAApB;AACA,eAAK8C,WAAL,CAAiB2B,OAAjB,CAAyB,UAAAY,OAAO,EAAI;AAClCrF,iBAAK,IAAIqF,OAAT;AACD,WAFD;AAGA,iBAAOrF,KAAP;AACD;;;;;;;uBA5CUkF,mB,EAAmB,8G;AAAA,K;;;aAAnBA,mB;AAAmB,eAAnBA,mBAAmB,K;AAAA,kBAFlB;;;;;sEAEDA,mB,EAAmB;cAH/B,wDAG+B;eAHpB;AACVD,oBAAU,EAAE;AADF,S;AAGoB,Q;;;;;;;;;;;;;;;;;;;;;;ACNhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaK,e;;;AAIX,iCAAc;AAAA;;AACZ,aAAKC,aAAL;AACA;;;;wCAEY;AACZ,eAAKlD,cAAL,GAAsB,CACpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CADoB,EAEpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CAFoB,EAGpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CAHoB,EAIpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CAJoB,EAKpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CALoB,EAMpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CANoB,EAOpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CAPoB,EAQpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CARoB,EASpB,IAAI,gEAAJ,CAAa,CAAb,EAAgB,YAAhB,EAA8B,UAA9B,EAA0C,CAA1C,CAToB,CAAtB;AAWA;;;oCAEWC,E,EAAY;AACtB,cAAIuC,KAAK,GAAG,CAAC,CAAb;AACA,eAAKxC,cAAL,CAAoBoC,OAApB,CAA4B,UAAAe,QAAQ,EAAI;AACtC,gBAAGA,QAAQ,CAACjG,EAAT,GAAcsF,KAAjB,EAAwBA,KAAK,GAAGW,QAAQ,CAACjG,EAAjB;AACzB,WAFD;AAGA+C,YAAE,CAAC/C,EAAH,GAAQsF,KAAK,GAAG,CAAhB;AACA,eAAKxC,cAAL,CAAoBsC,IAApB,CAAyBrC,EAAzB;AACD;;;iCAEQrF,E,EAAU;AACjB,eAAI,IAAI6D,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKuB,cAAL,CAAoBU,MAAvC,EAA+CjC,CAAC,EAAhD,EAAmD;AACjD,gBAAK,KAAKuB,cAAL,CAAoBvB,CAApB,EAAuBvB,EAAvB,IAA6BtC,EAAlC,EAAsC,OAAO6D,CAAP;AACvC;;AACD,iBAAO,CAAC,CAAR;AACD;;;uCAEcwB,E,EAAY;AAC1B,cAAI/B,KAAK,GAAG,KAAKwE,QAAL,CAAczC,EAAE,CAAC/C,EAAjB,CAAZ;AACA,cAAGgB,KAAK,GAAG,CAAC,CAAZ,EAAe,KAAK8B,cAAL,CAAoB9B,KAApB,IAA6B+B,EAA7B;AACf;;;uCAEcrF,E,EAAU;AACxB,cAAGA,EAAE,GAAG,CAAC,CAAT,EAAY,KAAKoF,cAAL,CAAoB2C,MAApB,CAA2B/H,EAA3B,EAA8B,CAA9B;AACZ;;;;;;;uBA7CSqI,e;AAAe,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVL,oBAAU,EAAE;AADF,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;ACP5B;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMQ,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,EACGC,KADH,CACS,UAAAC,GAAG;AAAA,aAAI7H,OAAO,CAAC8H,KAAR,CAAcD,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule, Component } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ModIptvListComponent } from './lists/mod-iptv-list/mod-iptv-list.component';\nimport { ChannelEditorComponent } from './channels/channel-editor/channel-editor.component';\nimport { ListEditorComponent } from './lists/list-editor/list-editor.component';\nimport { ChannelCreateComponent } from './channels/channel-create/channel-create.component';\nimport { ListCreateComponent } from './lists/list-create/list-create.component';\n\nconst routes: Routes = [\n  {\n    path: 'playlists', component: ModIptvListComponent, children: [\n      { path: 'addPlaylist', component: ListCreateComponent }\n    ]\n  },\n  {\n    path: 'playlists/:id', component: ChannelEditorComponent, children: [\n      { path: 'addChannel', component: ChannelCreateComponent }\n    ]\n  },\n  { path: '', redirectTo: '/playlists', pathMatch: 'full' },\n  { path: '**', redirectTo: '/playlists', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    enableTracing: false,\n    paramsInheritanceStrategy: \"always\",\n    useHash: true\n  }\n  )],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit  } from '@angular/core';\nimport { NavigatorBarService } from './services/navigator-service.service';\n\n@Component({\n  selector: 'home',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Home';\n\n  constructor() {\n    console.log(\"app-module constructor\");\n  }\n\n  ngOnInit(): void {\n    console.log(\"app-modulo oninit\");\n  }\n  \n}\n","<div class=\"container-column\">\n    <header class = \"column-item\">\n        <app-mod-header></app-mod-header>\n    </header>\n    <div class = \"column-item container-row\">\n        <section class=\"container container-column row-item-60\">\n            <app-navigator-bar></app-navigator-bar>\n            <!--\n            <mat-toolbar>\n                <button mat-button [routerLink] = \"['/playlists']\" [disabled] = 'isHome()'>\n                    <mat-icon>arrow_back</mat-icon></button>\n                <span class=\"spacer\"></span>\n                <button mat-button *ngIf=\"isHome(); else addAction\" \n                [disabled] = \"false\"\n                ><mat-icon>playlist_add</mat-icon>Agregar Lista</button>\n                <ng-template #addAction>\n                    <button mat-button><mat-icon>add</mat-icon>Agregar Canal</button>\n                </ng-template>\n            </mat-toolbar>\n            -->\n            <router-outlet ></router-outlet>\n            <!--\n            <app-mod-iptv-list (enableChannelEditor) = \"enableEditChannel = $event\" [hidden] = \"enableEditChannel\"\n                                (enablePlaylistEditor) = \"enableEditPlaylist = $event\"\n                                ></app-mod-iptv-list>\n            <app-channel-editor [hidden] = \"!enableEditChannel\"\n                                ></app-channel-editor>-->\n        </section>\n        <aside class = \"row-item-40\">\n            <router-outlet name=\"aside\"></router-outlet>\n            \n            <section>\n                <p>Selecciones una lista</p>\n                <p>Editar: Modificar aspectos de la lista.</p>\n                <p>Gestionar: Ver y Modificar el listado de canales de la lista.</p>\n                <p>Info: Mostrar información de la lista.</p>\n                <p><mat-icon>cloud_download</mat-icon>: Descargar la lista en .m3u</p>\n            </section>\n        </aside>\n    </div>\n    <footer class = \"column-item\">\n        <app-mod-footer></app-mod-footer>\n    </footer>\n</div>\n\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * End of Placeholder * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { ModHeaderComponent } from './mod-header/mod-header.component';\nimport { ModFooterComponent } from './mod-footer/mod-footer.component';\nimport { ChannelEditorComponent } from './channels/channel-editor/channel-editor.component';\nimport { ModIptvListComponent } from './lists/mod-iptv-list/mod-iptv-list.component';\nimport { ListEditorComponent } from './lists/list-editor/list-editor.component';\nimport { ListCreateComponent } from './lists/list-create/list-create.component';\nimport { ChannelCreateComponent } from './channels/channel-create/channel-create.component';\nimport { NavigatorBarComponent } from './lists/navigator-bar/navigator-bar.component';\n\nimport { PlaylistService } from './services/playlist/playlist.service';\nimport { NavigatorBarService } from './services/navigator-service.service';\n\n\n//Material\n\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport { FormsModule } from '@angular/forms';\nimport { ChannelService } from './services/channel/channel.service';\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ModHeaderComponent,\n    ModFooterComponent,\n    ModIptvListComponent,\n    ListEditorComponent,\n    ChannelEditorComponent,\n    ListCreateComponent,\n    ChannelCreateComponent,\n    NavigatorBarComponent,\n    NotFoundComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    //Material\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule\n  ],\n  providers: [ PlaylistService, ChannelService, NavigatorBarService ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { ChannelService } from 'src/app/services/channel/channel.service';\nimport { PlaylistService } from 'src/app/services/playlist/playlist.service';\nimport { Playlist } from 'src/app/models/Playlist';\nimport { Channel } from 'src/app/models/Channel';\nimport { NavigatorBarService } from 'src/app/services/navigator-service.service';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-channel-create',\n  templateUrl: './channel-create.component.html',\n  styleUrls: ['./channel-create.component.css']\n})\nexport class ChannelCreateComponent implements OnInit {\npublic newChannel: Channel = new Channel(-1,-1,\"\");\npublic urlInput: string;\n  constructor(private _location: Location,\n              private navbarService: NavigatorBarService,\n              private plService: PlaylistService,\n              private chnService: ChannelService,\n              private _snackBar: MatSnackBar) {\n              this.navbarService.addRoute(\"/addChannel\");\n              console.log(\"/addChannel added\");\n  }\n\n  ngOnInit(): void {\n  }\n\n  onCreate():void{\n    this.newChannel.IdPlaylist = this.plService.selectedPlaylist;\n    this.newChannel.Url = this.urlInput;\n    this.chnService.addChannel(this.newChannel);\n    this.openSnackBar(\"Canal creado (\" + this.newChannel.Id + \")\", \"Cerrar\");\n    this.navbarService.removeRoute();\n  }\n\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n  onCancel():void {\n    this.navbarService.removeRoute();\n  }\n\n}\n","<form action=\"\">\n    <mat-form-field class=\"color-200\">\n        <mat-label class=\"color-200\">Ingrese la URL</mat-label>\n        <input type=\"url\" id=\"url\" name=\"url\" [(ngModel)]=\"urlInput\" matInput>\n    </mat-form-field>\n    <button mat-button (click)=\"onCreate()\">Crear</button>\n    <button mat-button color=\"warn\" (click)=\"onCancel()\">Cancelar</button>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Channel } from '../../models/Channel';\nimport { ChannelService } from 'src/app/services/channel/channel.service';\nimport { PlaylistService } from 'src/app/services/playlist/playlist.service';\nimport { Playlist } from 'src/app/models/Playlist';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavigatorBarService } from 'src/app/services/navigator-service.service';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-channel-editor',\n  templateUrl: './channel-editor.component.html',\n  styleUrls: ['./channel-editor.component.css']\n})\nexport class ChannelEditorComponent implements OnInit {\n  public selectedPlaylist: Playlist;\n  public channels: Channel[];\n  public selectedChannel: number = null;\n  public enableEdit: boolean = false;\n  public index: number;\n  public chn$: Observable<Channel[]>;\n\n  constructor(private plService: PlaylistService,\n    private chnService: ChannelService,\n    private route: ActivatedRoute,\n    private navbarService: NavigatorBarService,\n    private _snackBar: MatSnackBar) {\n      console.log(\"app-channeleditor constructor\");\n    this.navbarService.isActiveChannelEditor = true;\n    this.route.paramMap.subscribe(\n      (params) => {\n        this.index = +params.get('id');\n        this.plService.selectedPlaylist = this.index;\n        this.channels = this.chnService.getChannels(this.index);\n        this.navbarService.addRoute(\"/\" + this.index);\n        console.log(\"/id added\");\n        //this.index = this.route.snapshot.params['id'];\n      }\n    );\n  }\n\n  ngOnInit(): void { console.log(\"app-channeleditor oninit\");\n    this.chn$ = this.chnService.getChannels$();\n    this.chn$.subscribe( () => this.channels = this.chnService.getChannels(this.index));\n  }\n\n  ngOnDestroy(): void {\n    this.navbarService.isActiveChannelEditor = false;\n  }\n\n  onAdd(channel: Channel): void {\n    this.chnService.addChannel(channel);\n  }\n\n  onEnableEdition(i: number): void {\n    this.selectedChannel = i;\n    this.enableEdit = true;\n  }\n\n  onChangeUrl(chn: Channel, urlInput: HTMLInputElement): void {\n    chn.Url = urlInput.value;\n    this.chnService.changeChannel(chn);\n    this.selectedChannel = null;\n    this.enableEdit = false;\n    this.openSnackBar(\"URL cambiada correctamente\", \"Cerrar\");\n  }\n\n  onRemove(id: number) {\n    this.chnService.removeChannel(id);\n    this.openSnackBar(\"Eliminado\", \"Cerrar\");\n  }\n\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n\n  onOpenUrl(i: number) {\n    window.location.href = this.channels[i].Url;\n  }\n\n}\n","<mat-list>\n    <mat-list-item>\n        <router-outlet></router-outlet>\n    </mat-list-item>\n    <mat-list-item *ngFor=\"let channel of this.channels, let i=index\">\n        <span class=\"channel-tittle\" matLine>Channel {{ channel.Id }} </span>\n        <span *ngIf=\"channel.Id != selectedChannel; else edit\" matLine>URL: {{ channel.Url }} </span>\n        <ng-template #edit>\n            <div class=\"container-row\">\n                <mat-form-field class=\"urlContainer\" matLine appearance=\"standart\" color=\"primary\">\n                    <mat-label>Ingrese la nueva URL</mat-label>\n                    <input type=\"url\" id=\"channelId\" [value]=\"channel.Url\" (keyup.enter)=\"onChangeUrl(channel, newUrl)\"\n                        #newUrl matInput>\n                </mat-form-field>\n                <button mat-stroked-button color=\"primary\" (click)=\"onChangeUrl(channel, newUrl)\">Guardar</button>\n                <button mat-stroked-button color=\"warn\" (click)=\"selectedChannel = null\">Cancelar</button>\n            </div>\n        </ng-template>\n        <button mat-button color=\"primary\" (click)=\"onEnableEdition(channel.Id)\"\n            *ngIf=\"channel.Id != selectedChannel\">Cambiar Url</button>\n        <button (click)=\"onRemove(channel.Id)\" mat-button color=\"warn\">Eliminar</button>\n        <button mat-button (click)=\"onOpenUrl(i)\">Abrir</button>\n        <mat-checkbox></mat-checkbox>\n        <mat-divider></mat-divider>\n    </mat-list-item>\n</mat-list>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Playlist } from 'src/app/models/Playlist';\nimport { PlaylistService } from 'src/app/services/playlist/playlist.service';\nimport { Location } from '@angular/common';\nimport { NavigatorBarService } from 'src/app/services/navigator-service.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n@Component({\n  selector: 'app-list-create',\n  templateUrl: './list-create.component.html',\n  styleUrls: ['./list-create.component.css']\n})\nexport class ListCreateComponent implements OnInit {\n  public newPlaylist: Playlist;\n  public nameInput: string;\n  constructor(private _location: Location,\n    private navbarService: NavigatorBarService,\n    private plService: PlaylistService,\n    private _snackBar: MatSnackBar) {\n    this.navbarService.addRoute(\"/addPlaylist\");\n    console.log(\"/addPlaylist added\");\n  }\n\n  ngOnInit(): void {\n    this.newPlaylist = new Playlist(-1, \"\", \"\", 0);\n  }\n\n  onCreate(): void {\n    this.newPlaylist.Name = this.nameInput;\n    this.plService.addPlaylist(this.newPlaylist);\n    this.openSnackBar(\"Lista creada: \" + this.newPlaylist.Name, \"Cerrar\");\n    this.navbarService.removeRoute();\n  }\n\n  onCancel(): void {\n    this.navbarService.removeRoute();\n  }\n\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n  /* Metodo con componente personalizado\n  openSnackBar() {\n    this._snackBar.openFromComponent(NotFoundComponent, {\n      duration: 3 * 1000,\n    });\n  }*/\n}\n","<form class=\"container-row\">\n    <mat-form-field class=\"row-item-60 color-200\">\n        <mat-label class=\"color-200\">Ingrese el nombre de la lista</mat-label>\n        <input class=\"color-200\" id=\"name\" name=\"name\" type=\"text\" [(ngModel)]=\"nameInput\" matInput placeholder=\"Ingrese el nuevo nombre de la lista\">\n    </mat-form-field>\n    <button mat-button class=\"row-item-20 color-200\" (click)=\"onCreate()\">Crear</button>\n    <button mat-button class=\"row-item-20\" color=\"warn\"\n    (click)=\"onCancel()\">Cancelar</button>\n</form>\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { Playlist } from '../../models/Playlist';\nimport { PlaylistService } from 'src/app/services/playlist/playlist.service';\n\n@Component({\n  selector: 'app-list-editor',\n  templateUrl: './list-editor.component.html',\n  styleUrls: ['./list-editor.component.css']\n})\nexport class ListEditorComponent implements OnInit {\n  @Output() disablePlaylistEditor = new EventEmitter<boolean>();\n  public changedPlaylist: Playlist = new Playlist(-1,\"test\",\"test\",0);\n  \n  constructor() {}\n\n  ngOnInit(): void {\n  }\n\n  setPlaylist(): void {\n    this.disablePlaylistEditor.emit(false);\n  }\n\n  onCancel(){\n    this.disablePlaylistEditor.emit(false);\n  }\n\n}\n","<div class=\"container-column\">\n  <span class=\"form-title\">Crear nueva lista en blanco</span>\n  <form class=\"container-column\">\n\n    <mat-form-field appearance=\"fill\" color=\"warn\">\n      <mat-label for=\"id\">ID</mat-label>\n      <input type=\"number\" id=\"id\" name=\"id\" [(ngModel)]=\"changedPlaylist.Id\" matInput>\n      <mat-hint>Value</mat-hint>\n    </mat-form-field>\n\n    <mat-form-field class=\"color-200\"  appearance=\"lighter\">\n      <mat-label for=\"name\">NOMBRE</mat-label>\n      <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Ingrese el nombre de la Lista.\"\n      [(ngModel)]=\"changedPlaylist.Name\" matInput>\n    </mat-form-field>\n\n    <div class=\"container-row\">\n      <button mat-flat-button color=\"primary\" (click)=\"setPlaylist()\">Guardar</button>\n      <button mat-flat-button color=\"accent\" (click)=\"onCancel()\">Descartar</button>\n    </div>\n  </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Playlist } from '../../models/Playlist';\nimport { Router } from '@angular/router';\nimport { PlaylistService } from 'src/app/services/playlist/playlist.service';\nimport { NavigatorBarService } from 'src/app/services/navigator-service.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-mod-iptv-list',\n  templateUrl: './mod-iptv-list.component.html',\n  styleUrls: ['./mod-iptv-list.component.css']\n})\nexport class ModIptvListComponent implements OnInit {\n  public selectedPlaylist: number;\n  public nameInput: string;\n  public enableEdit: boolean; \n  public playlists: Playlist[];\n\n  constructor(private navbarService: NavigatorBarService,\n              private plService: PlaylistService,\n              private router: Router,\n              private _snackBar: MatSnackBar) {\n                this.navbarService.isActivePlaylistsEditor = true;\n                console.log(\"app-iptvlist constructor\");     \n                this.navbarService.clearRoutes();\n                this.navbarService.addRoute(\"/playlists\");\n                console.log(\"/playlists added\"); \n                \n  }\n\n  ngOnInit(): void {   console.log(\"app-iptvlist oninit\");\n    this.playlists = this.plService.playlistSource;\n  }\n\n  ngOnDestroy(): void {\n    this.navbarService.isActivePlaylistsEditor = false;\n  }\n\n  onEditPlaylist(pl: Playlist):void {\n    this.onSelectPlaylist(pl.Id);\n    this.nameInput = pl.Name;\n    this.enableEdit = true;\n  }\n  onEditChannel(pl: Playlist):void{\n    this.plService.selectedPlaylist = this.selectedPlaylist;\n    this.router.navigate(['playlists/'+pl.Id]);\n  }\n\n  onSelectPlaylist(id: number){\n    this.selectedPlaylist = id;\n  }\n\n  onSavePlaylist(pl: Playlist){\n    pl.Name = this.nameInput;\n    this.plService.changePlaylist(pl);\n    this.selectedPlaylist = null;\n    this.openSnackBar(\"Guardado\", \"Cerrar\");\n  }\n\n  onDelete(id: number) {\n    this.plService.removePlaylist(id);\n    this.openSnackBar(\"Eliminado\", \"Cerrar\");\n  }\n\n  openSnackBar(message: string, action: string) {\n    this._snackBar.open(message, action, {\n      duration: 2000,\n    });\n  }\n}\n","<mat-list >\n    <mat-list-item >\n        <router-outlet></router-outlet>\n    </mat-list-item>\n    <mat-list-item *ngFor=\"let playlist of playlists\">\n        <div class=\"container-row content-spaced row-item-80\">\n        <section class=\"container-column\">\n            <div *ngIf=\"playlist.Id != selectedPlaylist; else form\">\n                <span class=\"playlist-name-style color-200\" matLine>{{playlist.Name}}</span>\n                <span class=\"playlist-description color-190\" matLine> Cantidad de canales canales: {{playlist.Items}}</span>\n            </div>\n            <ng-template #form>\n                <form matLine>\n                    <mat-form-field class=\"color-200 mat-input-resize\" appearance=\"fill\">\n                        <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Ingrese el nombre de la Lista.\"\n                            [(ngModel)]=\"nameInput\" matInput>\n                    </mat-form-field>\n                    <button class=\"color-190\" type=\"submit\" mat-button (click)=\"onSavePlaylist(playlist)\">\n                        <mat-icon>save</mat-icon> Guardar\n                    </button>\n                </form>\n            </ng-template>\n        </section>\n        <section class=\"container-row\">\n            <button class=\"mat-button-config\" mat-raised-button color=\"accent\" (click)=\"onEditPlaylist(playlist)\"\n                [disabled]=\"playlist.Id == selectedPlaylist\">Editar</button>\n            <button class=\"mat-button-config\" mat-raised-button color=\"warn\" (click)=\"onEditChannel(playlist)\">Abrir</button>\n            <button class=\"mat-button-config\" [disabled] = \"true\" mat-raised-button>\n                <mat-icon>cloud_download</mat-icon>\n            </button>\n            <button class=\"mat-button-config\" mat-button (click)=\"onDelete(playlist.Id)\">\n                <mat-icon color=\"warn\">delete</mat-icon>\n            </button>\n        </section>\n    </div>\n    </mat-list-item>\n    \n</mat-list>","import { Component, OnInit } from '@angular/core';\nimport { NavigatorBarService } from 'src/app/services/navigator-service.service';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-navigator-bar',\n  templateUrl: './navigator-bar.component.html',\n  styleUrls: ['./navigator-bar.component.css']\n})\nexport class NavigatorBarComponent implements OnInit {\n  isEnabledChannelList: boolean;\n  isEnabledAddChannel: boolean;\n  isEnabledAddPlaylist: boolean;\n  isEnabledArrowBack: boolean;\n\n  constructor(private _location: Location,\n    private router: Router,\n    private navbarService: NavigatorBarService) {\n    this.navbarService.routesTop.subscribe(\n      (param: string) => {\n        (this.navbarService.routesStack.length < 2) ? this.isEnabledArrowBack = false : this.isEnabledArrowBack = true;\n        if (this.navbarService.isActivePlaylistsEditor && !this.navbarService.isActiveChannelEditor) {\n          this.isEnabledAddChannel = false;\n          this.isEnabledAddPlaylist = true;\n          this.isEnabledChannelList = false;\n        }\n        //no hay otra situacion\n        else {\n          this.isEnabledAddChannel = true;\n          this.isEnabledAddPlaylist = false;\n          this.isEnabledChannelList = true;\n        }\n      }\n    ); console.log(\"app-navbar constructor\");\n  }\n\n  ngOnInit(): void {\n    console.log(\"app-navbar oninit\");\n  }\n\n  onAddChannel(): void {\n    if (this.navbarService.topRoute() != \"/addChannel\") {\n      this.router.navigate([this.router.url + \"/addChannel\"]);\n    }\n  }\n\n  onAddPlaylist(): void {\n    if (this.navbarService.topRoute() != \"/addPlaylist\") {\n      this.router.navigate([\"/playlists/addPlaylist\"]);\n    }\n  }\n\n  back(): void {\n    this.navbarService.removeRoute();\n  }\n}\n","<mat-toolbar class=\"color-50\">\n    <button mat-icon-button [disabled]='!isEnabledArrowBack' (click)=\"back()\">\n        <mat-icon>arrow_back</mat-icon>\n    </button>\n    <!--<span *ngFor=\"let item of routes\">{{ item }}</span>-->\n    <span class=\"spacer\"></span>\n    <button mat-button *ngIf=\"isEnabledAddPlaylist\" (click)=\"onAddPlaylist()\">\n        <mat-icon>playlist_add</mat-icon>Agregar Lista\n    </button>\n    <button mat-button *ngIf=\"isEnabledAddChannel\" (click)=\"onAddChannel()\">\n        <mat-icon>add</mat-icon>Agregar Canal\n    </button>\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-mod-footer',\n  templateUrl: './mod-footer.component.html',\n  styleUrls: ['./mod-footer.component.css']\n})\nexport class ModFooterComponent implements OnInit {\n\n  constructor() {console.log(\"app-footer constructor\"); }\n\n  ngOnInit(): void {console.log(\"app-footer oninit\");\n  }\n\n}\n","<div class=\"footer flex-container\">\n    <span>FOOTER</span>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-mod-header',\n  templateUrl: './mod-header.component.html',\n  styleUrls: ['./mod-header.component.css']\n})\nexport class ModHeaderComponent implements OnInit {\n\n  constructor() { \n    console.log(\"app-header constructor\");\n  }\n\n  ngOnInit(): void {console.log(\"app-header oninit\");\n  }\n\n}\n","<div class=\"header\">\n<mat-toolbar color =\"primary\">\n    <a [routerLink]=\"[ '/playlists' ]\"><span mat>HEADER</span></a>\n    \n</mat-toolbar>\n</div>\n","export class Channel{\r\n    private _idPlaylist: number;\r\n    private _id: number;\r\n    private _url: string;\r\n    get IdPlaylist(): number{ return this._idPlaylist; }\r\n    set IdPlaylist(idPlaylist: number){ this._idPlaylist = idPlaylist; }\r\n    get Id(): number{\r\n        return this._id;\r\n    }\r\n    set Id(id: number){\r\n        this._id = id;\r\n    }\r\n    get Url(): string{\r\n        return this._url;\r\n    }\r\n    set Url(url: string){\r\n        this._url = url;\r\n    }\r\n    \r\n    constructor(idPlaylist: number, id: number, url: string){\r\n        this._idPlaylist= idPlaylist;\r\n        this._id = id;\r\n        this._url = url;\r\n    }\r\n}","export class Playlist {\r\n    private _id: number;\r\n    private _name: string;\r\n    private _url: string;\r\n    private _items: number;\r\n    get Id(){ return this._id; }\r\n    set Id(id: number){ this._id = id; }\r\n    get Name(){ return this._name; }\r\n    set Name(name: string){ this._name = name; }\r\n    get Url(){ return this._url; }\r\n    set Url(url: string){ this._url = url; }\r\n    get Items(){ return this._items; }\r\n    set Items(items: number){ this._items = items; }\r\n    \r\n    constructor (id: number, name:string, url:string, items: number){\r\n        this._id = id;\r\n        this._name = name;\r\n        this._url = url;\r\n        this._items = items;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>not-found works!</p>\n\n","import { Injectable } from '@angular/core';\nimport { Channel } from 'src/app/models/Channel';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChannelService {\n  channelsSource: Channel[] = [\n    new Channel(0, 0, 'http://'),\n    new Channel(0, 1, 'http://'),\n    new Channel(0, 2, 'http://'),\n    new Channel(1, 3, 'http://'),\n    new Channel(0, 4, 'http://'),\n    new Channel(0, 5, 'http://'),\n    new Channel(1, 6, 'http://'),\n    new Channel(2, 7, 'http://'),\n    new Channel(2, 8, 'http://'),\n    new Channel(0, 9, 'http://'),\n    new Channel(7, 10, 'http://'),\n    new Channel(7, 11, 'http://'),\n    new Channel(6, 12, 'http://'),\n    new Channel(1, 13, 'http://'),\n    new Channel(4, 14, 'http://'),\n    new Channel(1, 15, 'http://'),\n    new Channel(8, 16, 'http://'),\n    new Channel(6, 17, 'http://'),\n    new Channel(3, 18, 'http://'),\n    new Channel(5, 19, 'http://'),\n  ];\n  channels$ = new Subject<Channel[]>();\n\n  constructor() {}\n\n  countPLChannels(idPl: number): number {\n    let n = 0;\n    this.channelsSource.forEach(chn => {\n      if (chn.IdPlaylist == idPl) n++;\n    });\n    return n;\n  }\n  \n  getChannels(idPl: number): Channel[] {\n    let chns: Channel[] = []\n    if (idPl != null) {\n      this.channelsSource.forEach(channel => {\n        if (channel.IdPlaylist == idPl) chns.push(channel);\n      })\n    }\n    return chns;\n  }\n\n  getChannels$(): Observable<Channel[]> {\n    return this.channels$.asObservable();\n  }\n\n  addChannel(chn: Channel): void {\n    let maxId = -1;\n    this.channelsSource.forEach(channel => {\n      if (channel.Id > maxId) maxId = channel.Id;\n    });\n    chn.Id = ++maxId;\n    if (chn.Id != -1) this.channelsSource.push(chn);\n    this.channels$.next(this.channelsSource);\n  }\n\n  removeChannel(id: number): void {\n    let index = this.findById(id);\n    if (index > -1) this.channelsSource.splice(index, 1);\n    this.channels$.next(this.channelsSource);\n  }\n\n  findById(id: number): number {\n    for (let i = 0; i < this.channelsSource.length; i++) {\n      if (this.channelsSource[i].Id == id) return i;\n    }\n    return -1;\n  }\n\n  changeChannel(chn: Channel) {\n    let index = this.findById(chn.Id);\n    if (index > -1) this.channelsSource[index] = chn;\n    this.channels$.next(this.channelsSource);\n  }\n}\n","import { Injectable, EventEmitter, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigatorBarService {\n  isActivePlaylistsEditor: boolean;\n  isActiveChannelEditor: boolean;\n  routesStack: string[]= [];\n  routesTop: EventEmitter<string> = new EventEmitter<string>();\n  \n  constructor(private router: Router) {console.log(\"app-navbarservice constructor\");\n  }\n\n  addRoute(route: string){\n    this.routesStack.push(route);\n    this.routesTop.emit(this.topRoute());\n  }\n\n  removeRoute():void {\n    //console.log(\"before:  \" + this.toString());\n    if (this.routesStack.length > 1) {\n      this.routesStack.pop();\n      //console.log(\"after:  \" + this.toString());\n      this.routesTop.emit(this.topRoute());\n      this.router.navigate([this.toString()]);\n    }\n    /*\n    if (this.routesStack.length > 1) {\n      this.routesStack.pop();\n      this.routesTop.emit(this.routesStack[this.routesStack.length-1]);\n    }*/\n  }\n\n  topRoute(): string {\n    if(this.routesStack.length > 0) return this.routesStack[this.routesStack.length-1];\n    else return \"\";\n  }\n\n  clearRoutes() {\n    this.routesStack = [];\n  }\n\n  toString() {\n    let route: string = \"\";\n    this.routesStack.forEach(section => {\n      route += section;\n    });\n    return route;\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Playlist } from 'src/app/models/Playlist';\nimport { ChannelService } from '../channel/channel.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlaylistService {\n  playlistSource: Playlist[];\n  selectedPlaylist: number;\n\n  constructor() {\n    this.loadPlaylists();\n   }\n   \n   loadPlaylists(): void {\n    this.playlistSource = [\n      new Playlist(0, 'Playlist 0', 'https://', 0),\n      new Playlist(1, 'Playlist 1', 'https://', 0),\n      new Playlist(2, 'Playlist 2', 'https://', 0),\n      new Playlist(3, 'Playlist 3', 'https://', 0),\n      new Playlist(4, 'Playlist 4', 'https://', 0),\n      new Playlist(5, 'Playlist 5', 'https://', 0),\n      new Playlist(6, 'Playlist 6', 'https://', 0),\n      new Playlist(7, 'Playlist 7', 'https://', 0),\n      new Playlist(8, 'Playlist 8', 'https://', 0)\n    ];\n   }\n\n   addPlaylist(pl: Playlist): void{\n     let maxId = -1;\n     this.playlistSource.forEach(playlist => {\n       if(playlist.Id > maxId) maxId = playlist.Id; \n     });\n     pl.Id = maxId + 1;\n     this.playlistSource.push(pl);\n   }\n\n   findById(id: number): number{\n     for(let i = 0; i < this.playlistSource.length; i++){\n       if ( this.playlistSource[i].Id == id) return i;\n     }\n     return -1;\n   }\n\n   changePlaylist(pl: Playlist): void {\n    let index = this.findById(pl.Id);\n    if(index > -1) this.playlistSource[index] = pl;\n   }\n\n   removePlaylist(id: number): void {\n    if(id > -1) this.playlistSource.splice(id,1);\n   }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}